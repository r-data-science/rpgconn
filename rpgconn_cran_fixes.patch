diff --git a/DESCRIPTION b/DESCRIPTION
index 2af4521..493c501 100644
--- a/DESCRIPTION
+++ b/DESCRIPTION
@@ -1,18 +1,27 @@
 Package: rpgconn
 Type: Package
-Title: Simple Database Connection
-Version: 0.2.3
+Title: User-Friendly PostgreSQL Connection Management
+Version: 0.2.4
 Authors@R: 
     person(given = "Bobby",
            family = "Fatemi",
            role = c("aut", "cre"),
            email = "bfatemi07@gmail.com")
 Maintainer: Bobby Fatemi <bfatemi07@gmail.com>
-Description: Simplified odbc connection management.
+Description: Provides a user-friendly interface for managing PostgreSQL
+    database connection settings.  The package supplies helper functions to
+    create, edit and load connection and option configuration files stored in a
+    user-specific directory using the 'odbc' and 'RPostgres' back ends.  These
+    helpers make it easy to construct a reproducible connection string from a
+    configuration file, either by reading user-defined YAML files or by parsing
+    an environment variable.
 Encoding: UTF-8
 LazyData: true
 License: MIT + file LICENSE
 RoxygenNote: 7.3.2
+Depends: R (>= 4.1.0)
+URL: https://github.com/r-data-science/rpgconn
+BugReports: https://github.com/r-data-science/rpgconn/issues
 Imports: 
     DBI,
     fs,
diff --git a/LICENSE b/LICENSE
index c9bf258..5d41c2f 100644
--- a/LICENSE
+++ b/LICENSE
@@ -1,2 +1,21 @@
-YEAR: 2023
-COPYRIGHT HOLDER: Bobby Fatemi
+MIT License
+
+Copyright (c) 2023 Bobby Fatemi
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/NAMESPACE b/NAMESPACE
index 1b5078e..82b7b34 100644
--- a/NAMESPACE
+++ b/NAMESPACE
@@ -19,3 +19,4 @@ importFrom(stringr,str_extract)
 importFrom(stringr,str_split_1)
 importFrom(usethis,edit_file)
 importFrom(yaml,yaml.load_file)
+importFrom(tools,R_user_dir)
diff --git a/R/pgdbconn.R b/R/pgdbconn.R
index df530a8..4ca33e2 100644
--- a/R/pgdbconn.R
+++ b/R/pgdbconn.R
@@ -123,22 +123,40 @@ init_yamls <- function() {
 #' @describeIn pgdbconn get the path to the rpg settings directory
 #' @export
 dir_rpg <- function() {
-  fs::path(Sys.getenv("HOME", "."), ".rpgconn")
+  # Use a user-specific configuration directory compliant with CRAN policies
+  # tools::R_user_dir creates a directory unique to this package in a standard
+  # per-user location. See ?tools::R_user_dir for details.
+  tools::R_user_dir("rpgconn", which = "config")
 }
 
 #' @describeIn pgdbconn edit the internally configured connection parameters
 #' @export
 edit_config <- function() {
-  usethis::edit_file(xpath_config())
+  f <- xpath_config()
+  if (interactive()) {
+    # Only launch the editor in interactive sessions (e.g. at the console).
+    usethis::edit_file(f)
+  } else {
+    message("edit_config() called in non-interactive mode; returning file path without opening an editor.")
+  }
+  invisible(f)
 }
 
 #' @describeIn pgdbconn edit the internally configured connection options
 #' @export
 edit_options <- function() {
-  usethis::edit_file(xpath_options())
+  f <- xpath_options()
+  if (interactive()) {
+    # Only launch the editor in interactive sessions (e.g. at the console).
+    usethis::edit_file(f)
+  } else {
+    message("edit_options() called in non-interactive mode; returning file path without opening an editor.")
+  }
+  invisible(f)
 }
 
 #' @describeIn pgdbconn internal function to read conn args from yaml
+#' @noRd
 load_c_args <- function() {
   path <- xpath_config()
   if (!fs::file_exists(path)) {
@@ -148,6 +166,7 @@ load_c_args <- function() {
 }
 
 #' @describeIn pgdbconn internal function to read conn options from yaml
+#' @noRd
 load_c_opts <- function() {
   path <- xpath_options()
   if (!fs::file_exists(path)) {
@@ -157,22 +176,26 @@ load_c_opts <- function() {
 }
 
 #' @describeIn pgdbconn internal function to get path of config file
+#' @noRd
 xpath_config <- function() {
-  fs::path(Sys.getenv("HOME"), ".rpgconn/config.yml")
+  fs::path(dir_rpg(), "config.yml")
 }
 
 #' @describeIn pgdbconn internal function to get path of options file
+#' @noRd
 xpath_options <- function() {
-  fs::path(Sys.getenv("HOME"), ".rpgconn/options.yml")
+  fs::path(dir_rpg(), "options.yml")
 }
 
 
 #' @describeIn pgdbconn internal function to get path of config file template
+#' @noRd
 xpath_config_templ <- function() {
   fs::path_package("rpgconn", "extdata", "config.yml")
 }
 
 #' @describeIn pgdbconn internal function to get path of options file template
+#' @noRd
 xpath_options_templ <- function() {
   fs::path_package("rpgconn", "extdata", "options.yml")
 }
diff --git a/R/use-config.R b/R/use-config.R
index 9dd3998..860cd03 100644
--- a/R/use-config.R
+++ b/R/use-config.R
@@ -4,6 +4,10 @@
 #' @param path path to new config yaml file to use
 #' @param overwrite overwrite existing config yaml set prior. Default FALSE
 #'
+#' @return Invisible character vector giving the path to the active configuration
+#'   file after it has been replaced.  In non-interactive sessions the file is
+#'   silently returned.
+#'
 #' @export
 use_config <- function(path, overwrite = FALSE) {
 
@@ -42,5 +46,8 @@ use_config <- function(path, overwrite = FALSE) {
       c$message
     ), call. = FALSE)
   })
+
+  # return the path invisibly so that tests can assert on it without printing
+  invisible(curr_path)
 }
 
diff --git a/tests/testthat/test-pgdbconn.R b/tests/testthat/test-pgdbconn.R
index 1497765..400c2bd 100644
--- a/tests/testthat/test-pgdbconn.R
+++ b/tests/testthat/test-pgdbconn.R
@@ -6,8 +6,14 @@ test_that("Test init yamls", {
 
 
 test_that("Test Files", {
-  xpath_config_templ() |> fs::file_exists() |> expect_true()
-  xpath_options_templ() |> fs::file_exists() |> expect_true()
+  # The example configuration templates should be installed in the package's
+  # extdata directory.  Use system.file() to locate them.
+  system.file("extdata", "config.yml", package = "rpgconn") |>
+    fs::file_exists() |>
+    expect_true()
+  system.file("extdata", "options.yml", package = "rpgconn") |>
+    fs::file_exists() |>
+    expect_true()
 })
 
 
diff --git a/tests/testthat/test-use-config.R b/tests/testthat/test-use-config.R
index 5223276..1cf6c05 100644
--- a/tests/testthat/test-use-config.R
+++ b/tests/testthat/test-use-config.R
@@ -2,9 +2,10 @@ test_that("multiplication works", {
 
   ## Move existing config to temp and reset after test
   old_conf <- tempfile(fileext = ".yaml")
-  fs::file_copy(xpath_config(), old_conf)
+  conf_path <- fs::path(dir_rpg(), "config.yml")
+  fs::file_copy(conf_path, old_conf)
   on.exit(
-    fs::file_copy(old_conf, xpath_config(), overwrite = TRUE)
+    fs::file_copy(old_conf, conf_path, overwrite = TRUE)
   )
 
 
@@ -14,7 +15,7 @@ test_that("multiplication works", {
 
 
   ## Remove Existing file and try again
-  fs::file_delete(xpath_config())
+  fs::file_delete(conf_path)
 
   use_config("test_config.yaml") |>
     expect_no_error()
